# This section is only needed if you want to redirect http traffic to https.
# You can live without it but clients will have to type in https:// to reach gitlab.
<VirtualHost *:80>
  ServerName 192.168.1.135
  ServerSignature Off

  RewriteEngine on
  RewriteCond %{HTTPS} !=on
  RewriteRule .* https://%{SERVER_NAME}%{REQUEST_URI} [NE,R,L]
</VirtualHost>

<VirtualHost *:443>
  SSLEngine on
  #strong encryption ciphers only
  #see ciphers(1) http://www.openssl.org/docs/apps/ciphers.html
  SSLProtocol all -SSLv2
  SSLHonorCipherOrder on
  SSLCipherSuite "ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS"
  Header add Strict-Transport-Security: "max-age=15768000;includeSubdomains"
  RequestHeader set "X-Forwarded-Proto" expr=%{REQUEST_SCHEME}
  SSLCompression Off
  SSLCertificateFile /etc/ssl/certs/babelci.crt
  SSLCertificateKeyFile /etc/ssl/certs/babelci.key
#  SSLCACertificateFile /etc/httpd/ssl.crt/your-ca.crt

  ServerName 192.168.1.135
  ServerName git.example.at

  DocumentRoot /opt/gitlab/embedded/service/gitlab-rails/public/
  <Directory /opt/gitlab/embedded/service/gitlab-rails/public/>
    Require all granted
  </Directory>

  ProxyPreserveHost On
  AllowEncodedSlashes Off

  <Location />
    Order deny,allow
    Allow from all
    ProxyPassReverse http://127.0.0.1:8080
    ProxyPassReverse http://git.example.at/
  </Location>

  RewriteEngine on
  RewriteCond %{DOCUMENT_ROOT}/%{REQUEST_FILENAME} !-f
  RewriteRule .* http://127.0.0.1:8080%{REQUEST_URI} [P,QSA]


</VirtualHost>


